		GIT

	Inicialização de um repositório
	  *git init - A partir da inicialização do repositório, o git consegue nos informar as alterações realizadas dentro do repositório,
				  nos informa quem modificou, quando modificou e quais foram as alterações feitas no arquivo.
	  *git status - É um comando para nos mostrar se houveram commits, se ainda existe arquivos que não estão sendo monitorados pelo git, nos informa em que branch estamos.
	  *git add - É o comando para fazer o git começar a versionar o nosso arquivo, a partir disso iremos saber as mudanças que irão ocorrer nos nossos arquivos.
				 Todas vezes que fizermos alguma modificação em algum arquivo, a gente roda esse comando com o nome do arquivo.
	  *git rm - É o comando para fazer o git para parar de versionar um arquivo.
	  *git commit -m - É a maneira que salvamos as alterações dos nossos arquivos, sempre usar uma mensagem descritiva do que está acontecendo em cada commit.
					   Com esse comando, ele mostra quantas modificações foram inserida nos arquivos.
	  *git log - Mostra todos os commits feitos e o ID de quem fez esses commits. A gente várias combinações desse comando que podem ser bastante úteis.
	  
	Inicializando um repositório para salvar somente os commits, basicamente salvar as alterações do arquivo
	  *git init --bare	
	
	Compartilhando o código com a equipe
	  *git add remote <URL> - Assim a gente se conecta com o servidor remoto.
	  *git remote - para checar se existe repositórios remotos.
	  *git remote -v - para checar o status.
	  *git remote rm <nome-do-servidor> - A gente para de se conectar com o servidor remoto.

	Clonando um repositório para trabalhar localmente
	  *git clone <URL> - Assim a gente clona localmente o repositório do servidor.
	  *git push <servidor-remoto> <nome da branch> - Assim a gente empurra a nossas mudanças do arquivo para o servidor remoto.
	  *git pull <servidor-remoto> <nome da branch> - Assim a gente puxa as mudanças para o nosso repositório local.
	  
	Branches(ramos) - O que são e como trabalhar com elas
		São utilizados para desenvolver funcionalidades isoladas uma das outras.
		A branch "main" é a branch principal e onde contém o código fonte oficial
		A gente vai criando outras branches para adicionar novas funcionalidades,
		para que as mudanças em outras branches não afete a branche principal.
		Então só depois de ter a certeza de que tudo está corretamente funcionando e devidamente pronto, então é feito o merge das branches..
	

	  *git branch <nome-da-nova-branch> - Você cria uma nova branch.
	  *git branch - A gente consegue checar quais são todas as branchs que temos no nosso repositório.
	  *git branch -m <novo-nome-para-a-branch> - Assim a gente consegue mudar o nome da branch em que estamos trabalhando. 
	  *git checkout <nome-de-uma-branch> - Você muda para a branch escolhida e poderá começar implementar o seu código sem estar alterando o funcionamento da branch principal.
//	  *git checkout -b <nome-da-nova-branch-a-ser-criada> - você cria a nova branch e muda para ela com um comando só.
	  *git merge <nome-da-branch> - Isso irá unir as ramificações e atualizará as mudanças feitas até o momento.
	  *git rebase <nome-da-branch> - Ainda não sei o que caralhos vai fazer, mas tudo bem
 
	HEAD: Estado atual do nosso código, ou seja, onde o Git os colocou
	Working tree: Local onde os arquivos realmente estão sendo armazenados e editados
	index: Local onde o Git armazena o que será commitado, ou seja, o local entre a working tree e o repositório Git em si.
//


/*Para fazer o git ignorar arquivos de configuração, a gente faz um arquivo:
	.gitignore
	obs: adc esse arquivo tbm
*/


		DICAS SOBRE COMMIT
*/	Sempre commit algo que funciona.
	Sempre que fizer mudanças significativas é necessário commitar.
	Interessante a cada resolução de bug fazer um commit.
	Assim a gente consegue rastrear melhor as mudanças do código.


/* FERRAMENTA LEGAL PARA APRENDER GIT
	Visualizing git 
*/
